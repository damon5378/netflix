{"version":3,"sources":["img/avatar.png","axios.js","Row.jsx","requests.js","Banner.jsx","Nav.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Row","props","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","fetchURL","request","data","results","fetchData","className","title","map","movie","key","id","src","isLargeRow","poster_path","backdrop_path","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","get","catch","error","console","log","handleClick","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","avatar","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.77efe3af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.1b52231c.png\";","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n})\r\n\r\n\r\n\r\nexport default instance;","import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport instance from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nexport const Row = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await instance(props.fetchURL);\r\n            // https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n        // if [], run once when the row loads and don't run again\r\n    }, [props.fetchURL]);\r\n\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n      },\r\n      autoplay: 1\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n      if(trailerUrl) {\r\n        setTrailerUrl('')\r\n      } else {\r\n        movieTrailer(movie?.name || \"\")\r\n        .then(url => {\r\n          // https://www.youtube.com/watch?v=${}\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'))\r\n        }).catch(error => console.log(error))\r\n      }\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"row\">\r\n\r\n      <h2>{props.title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map( movie => (\r\n            <img \r\n                key={movie.id}\r\n                src={`${baseURL}${props.isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                onClick={ () => handleClick(movie) }\r\n                alt={movie.name}\r\n                className={`row__poster ${props.isLargeRow && \"row__posterLarge\"}`}/>\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n};\r\n","const API_KEY = 'c0f03d33f7d32ca86cb57fb385a469dd';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport requests from \"./requests\";\r\nimport instance from \"./axios\";\r\nimport \"./Banner.css\";\r\n\r\nexport const Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str, n) {\r\n      return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport avatar from './img/avatar.png';\r\nimport './Nav.css';\r\n\r\nexport const Nav = () => {\r\n\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else {\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\" \r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\" \r\n                alt=\"Netflix Logo\"/>\r\n            <img\r\n                className=\"nav__avatar\" \r\n                src={avatar} \r\n                alt=\"Avatar Logo\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Row } from './Row';\nimport requests from './requests';\nimport { Banner } from './Banner';\nimport { Nav } from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Nav />\n    <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchURL={requests.fetchNetflixOriginals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies}/>\n      <Row title=\"Comedy movies\" fetchURL={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}